{"version":3,"file":"static/js/199.0ae1cd35.chunk.js","mappings":"gQASA,iBAEA,UAmCA,SAASA,EAKPC,EACAC,G,QAEMC,EAASF,EAAME,OAQrB,QAJGA,GAA4B,IAAlBA,EAAOC,OAEdD,EAAOA,EAAOC,OAAS,KACJ,QAAlB,EAAAC,KAAKC,qBAAaC,IAAAA,OAAA,EAAAA,EAAEC,KAAKN,IAAa,EAAI,GAF3CD,EAAMQ,cAGK,KAAiB,QAAX,EAAAJ,KAAKK,cAAMC,IAAAA,OAAA,EAAAA,EAAEC,aAAc,GAtCpDC,EAAAA,QAAWC,WAAW,mBAAmB,SAAAJ,GACvC,IAAMK,EAASC,EAAAA,aAAa,CAC1BC,cAAe,SAAAC,GAAU,OAAAA,EAAOC,YAChCC,SAAUC,EACVC,WAAYC,EACZC,aAAc,CAAEC,QAASf,EAAOe,WAGlC,MAAO,CACLf,OAAM,EACNgB,WAAYX,EAAOW,WACnBC,MAAQZ,EAAOY,MACf3B,OAAM,EACNM,cAAe,YACfsB,KAAM,QACNC,cAAe,CACbC,MAAO,SACPC,QAAS,YA2Bf,IAAMV,EAAW,CAEfW,YAAa,kBAGbC,OAAQ,4DAGRC,OAAQ,0DAGRC,QAAS,oBAMLZ,EAAa,CACjBa,SAAU,CAACpB,EAAAA,EAAE,KAAMA,EAAAA,KAAK,QAASA,EAAAA,EAAE,MAAOA,EAAAA,EAAE,MAC5CqB,MAAO,CAACrB,EAAAA,EAAE,SAAU,OAAQA,EAAAA,EAAE,KAAM,SACpCsB,MAAA,SAAMX,GACJ,OAAQA,EAAMY,MACZ,IAAK,SACH,MAAO,cACT,IAAK,SACH,MAAO,cACT,IAAK,cACH,OAAQZ,EAAMa,OACZ,IAAK,IACH,MAAO,YACT,IAAK,IACH,MAAO,cAEX,OAAO,KACT,IAAK,UACH,OAAQb,EAAMa,OACZ,IAAK,OACL,IAAK,QACH,MAAO,eACT,IAAK,OACH,MAAO,YAEX,OAAO,OAGbC,YAAa,CAACzB,EAAAA,EAAE,SAAU,WAC1B0B,YAAa,CAAC1B,EAAAA,EAAE,SAAU,WAC1B2B,aAAc,CAAC3B,EAAAA,EAAE,UAAW,YAC5B4B,UAAW,CAAC5B,EAAAA,EAAE,UAAW,YACzB6B,UAAW,CAAC7B,EAAAA,EAAE,KAAMA,EAAAA,KAAK,QAASA,EAAAA,EAAE,MAAOA,EAAAA,EAAE,MAC7C8B,YAAa,CAAC9B,EAAAA,EAAE,KAAMA,EAAAA,KAAK,cAAeA,EAAAA,EAAE,MAAOA,EAAAA,EAAE,MACrD+B,YAAa,CAAC/B,EAAAA,EAAE,SAAU,YAAaA,EAAAA,EAAE,KAAM","sources":["../../../node_modules/codemirror-graphql/src/results/mode.ts"],"sourcesContent":["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\n\nimport {\n  list,\n  t,\n  onlineParser,\n  p,\n  State,\n  Token,\n} from 'graphql-language-service';\n\n/**\n * This mode defines JSON, but provides a data-laden parser state to enable\n * better code intelligence.\n */\nCodeMirror.defineMode('graphql-results', config => {\n  const parser = onlineParser({\n    eatWhitespace: stream => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize },\n  });\n\n  return {\n    config,\n    startState: parser.startState,\n    token: (parser.token as unknown) as CodeMirror.Mode<any>['token'], // TODO: Check if the types are indeed compatible\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: 'brace',\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: '[]{}',\n    },\n  };\n});\n\nfunction indent(\n  this: CodeMirror.Mode<any> & {\n    electricInput?: RegExp;\n    config?: CodeMirror.EditorConfiguration;\n  },\n  state: State,\n  textAfter: string,\n) {\n  const levels = state.levels;\n  // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n  const level =\n    !levels || levels.length === 0\n      ? state.indentLevel\n      : levels[levels.length - 1] -\n        (this.electricInput?.test(textAfter) ? 1 : 0);\n  return (level || 0) * (this.config?.indentUnit || 0);\n}\n\n/**\n * The lexer rules. These are exactly as described by the spec.\n */\nconst LexRules = {\n  // All Punctuation used in JSON.\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n\n  // JSON Number.\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n\n  // JSON String.\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n\n  // JSON literal keywords.\n  Keyword: /^true|false|null/,\n};\n\n/**\n * The parser rules for JSON.\n */\nconst ParseRules = {\n  Document: [p('{'), list('Entry', p(',')), p('}')],\n  Entry: [t('String', 'def'), p(':'), 'Value'],\n  Value(token: Token) {\n    switch (token.kind) {\n      case 'Number':\n        return 'NumberValue';\n      case 'String':\n        return 'StringValue';\n      case 'Punctuation':\n        switch (token.value) {\n          case '[':\n            return 'ListValue';\n          case '{':\n            return 'ObjectValue';\n        }\n        return null;\n      case 'Keyword':\n        switch (token.value) {\n          case 'true':\n          case 'false':\n            return 'BooleanValue';\n          case 'null':\n            return 'NullValue';\n        }\n        return null;\n    }\n  },\n  NumberValue: [t('Number', 'number')],\n  StringValue: [t('String', 'string')],\n  BooleanValue: [t('Keyword', 'builtin')],\n  NullValue: [t('Keyword', 'keyword')],\n  ListValue: [p('['), list('Value', p(',')), p(']')],\n  ObjectValue: [p('{'), list('ObjectField', p(',')), p('}')],\n  ObjectField: [t('String', 'property'), p(':'), 'Value'],\n};\n"],"names":["indent","state","textAfter","levels","length","this","electricInput","_a","test","indentLevel","config","_b","indentUnit","codemirror_1","defineMode","parser","graphql_language_service_1","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","Entry","Value","kind","value","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField"],"sourceRoot":""}