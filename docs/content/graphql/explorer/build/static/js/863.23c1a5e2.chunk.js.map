{"version":3,"file":"static/js/863.23c1a5e2.chunk.js","mappings":"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","sources":["../../../node_modules/@graphiql/react/dist/javascript.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar javascript$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    CodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n      var indentUnit = config.indentUnit;\n      var statementIndent = parserConfig.statementIndent;\n      var jsonldMode = parserConfig.jsonld;\n      var jsonMode = parserConfig.json || jsonldMode;\n      var trackScope = parserConfig.trackScope !== false;\n      var isTS = parserConfig.typescript;\n      var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n      var keywords = function() {\n        function kw(type2) {\n          return { type: type2, style: \"keyword\" };\n        }\n        __name(kw, \"kw\");\n        var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n        var operator = kw(\"operator\"), atom = { type: \"atom\", style: \"atom\" };\n        return {\n          \"if\": kw(\"if\"),\n          \"while\": A,\n          \"with\": A,\n          \"else\": B,\n          \"do\": B,\n          \"try\": B,\n          \"finally\": B,\n          \"return\": D,\n          \"break\": D,\n          \"continue\": D,\n          \"new\": kw(\"new\"),\n          \"delete\": C,\n          \"void\": C,\n          \"throw\": C,\n          \"debugger\": kw(\"debugger\"),\n          \"var\": kw(\"var\"),\n          \"const\": kw(\"var\"),\n          \"let\": kw(\"var\"),\n          \"function\": kw(\"function\"),\n          \"catch\": kw(\"catch\"),\n          \"for\": kw(\"for\"),\n          \"switch\": kw(\"switch\"),\n          \"case\": kw(\"case\"),\n          \"default\": kw(\"default\"),\n          \"in\": operator,\n          \"typeof\": operator,\n          \"instanceof\": operator,\n          \"true\": atom,\n          \"false\": atom,\n          \"null\": atom,\n          \"undefined\": atom,\n          \"NaN\": atom,\n          \"Infinity\": atom,\n          \"this\": kw(\"this\"),\n          \"class\": kw(\"class\"),\n          \"super\": kw(\"atom\"),\n          \"yield\": C,\n          \"export\": kw(\"export\"),\n          \"import\": kw(\"import\"),\n          \"extends\": C,\n          \"await\": C\n        };\n      }();\n      var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n      var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n      function readRegexp(stream) {\n        var escaped = false, next, inSet = false;\n        while ((next = stream.next()) != null) {\n          if (!escaped) {\n            if (next == \"/\" && !inSet)\n              return;\n            if (next == \"[\")\n              inSet = true;\n            else if (inSet && next == \"]\")\n              inSet = false;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n      }\n      __name(readRegexp, \"readRegexp\");\n      var type, content;\n      function ret(tp, style, cont2) {\n        type = tp;\n        content = cont2;\n        return style;\n      }\n      __name(ret, \"ret\");\n      function tokenBase(stream, state) {\n        var ch = stream.next();\n        if (ch == '\"' || ch == \"'\") {\n          state.tokenize = tokenString(ch);\n          return state.tokenize(stream, state);\n        } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n          return ret(\"number\", \"number\");\n        } else if (ch == \".\" && stream.match(\"..\")) {\n          return ret(\"spread\", \"meta\");\n        } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n          return ret(ch);\n        } else if (ch == \"=\" && stream.eat(\">\")) {\n          return ret(\"=>\", \"operator\");\n        } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n          return ret(\"number\", \"number\");\n        } else if (/\\d/.test(ch)) {\n          stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n          return ret(\"number\", \"number\");\n        } else if (ch == \"/\") {\n          if (stream.eat(\"*\")) {\n            state.tokenize = tokenComment;\n            return tokenComment(stream, state);\n          } else if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return ret(\"comment\", \"comment\");\n          } else if (expressionAllowed(stream, state, 1)) {\n            readRegexp(stream);\n            stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n            return ret(\"regexp\", \"string-2\");\n          } else {\n            stream.eat(\"=\");\n            return ret(\"operator\", \"operator\", stream.current());\n          }\n        } else if (ch == \"`\") {\n          state.tokenize = tokenQuasi;\n          return tokenQuasi(stream, state);\n        } else if (ch == \"#\" && stream.peek() == \"!\") {\n          stream.skipToEnd();\n          return ret(\"meta\", \"meta\");\n        } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n          return ret(\"variable\", \"property\");\n        } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (isOperatorChar.test(ch)) {\n          if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n            if (stream.eat(\"=\")) {\n              if (ch == \"!\" || ch == \"=\")\n                stream.eat(\"=\");\n            } else if (/[<>*+\\-|&?]/.test(ch)) {\n              stream.eat(ch);\n              if (ch == \">\")\n                stream.eat(ch);\n            }\n          }\n          if (ch == \"?\" && stream.eat(\".\"))\n            return ret(\".\");\n          return ret(\"operator\", \"operator\", stream.current());\n        } else if (wordRE.test(ch)) {\n          stream.eatWhile(wordRE);\n          var word = stream.current();\n          if (state.lastType != \".\") {\n            if (keywords.propertyIsEnumerable(word)) {\n              var kw = keywords[word];\n              return ret(kw.type, kw.style, word);\n            }\n            if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n              return ret(\"async\", \"keyword\", word);\n          }\n          return ret(\"variable\", \"variable\", word);\n        }\n      }\n      __name(tokenBase, \"tokenBase\");\n      function tokenString(quote) {\n        return function(stream, state) {\n          var escaped = false, next;\n          if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n            state.tokenize = tokenBase;\n            return ret(\"jsonld-keyword\", \"meta\");\n          }\n          while ((next = stream.next()) != null) {\n            if (next == quote && !escaped)\n              break;\n            escaped = !escaped && next == \"\\\\\";\n          }\n          if (!escaped)\n            state.tokenize = tokenBase;\n          return ret(\"string\", \"string\");\n        };\n      }\n      __name(tokenString, \"tokenString\");\n      function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n          if (ch == \"/\" && maybeEnd) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          maybeEnd = ch == \"*\";\n        }\n        return ret(\"comment\", \"comment\");\n      }\n      __name(tokenComment, \"tokenComment\");\n      function tokenQuasi(stream, state) {\n        var escaped = false, next;\n        while ((next = stream.next()) != null) {\n          if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        return ret(\"quasi\", \"string-2\", stream.current());\n      }\n      __name(tokenQuasi, \"tokenQuasi\");\n      var brackets = \"([{}])\";\n      function findFatArrow(stream, state) {\n        if (state.fatArrowAt)\n          state.fatArrowAt = null;\n        var arrow = stream.string.indexOf(\"=>\", stream.start);\n        if (arrow < 0)\n          return;\n        if (isTS) {\n          var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n          if (m)\n            arrow = m.index;\n        }\n        var depth = 0, sawSomething = false;\n        for (var pos = arrow - 1; pos >= 0; --pos) {\n          var ch = stream.string.charAt(pos);\n          var bracket = brackets.indexOf(ch);\n          if (bracket >= 0 && bracket < 3) {\n            if (!depth) {\n              ++pos;\n              break;\n            }\n            if (--depth == 0) {\n              if (ch == \"(\")\n                sawSomething = true;\n              break;\n            }\n          } else if (bracket >= 3 && bracket < 6) {\n            ++depth;\n          } else if (wordRE.test(ch)) {\n            sawSomething = true;\n          } else if (/[\"'\\/`]/.test(ch)) {\n            for (; ; --pos) {\n              if (pos == 0)\n                return;\n              var next = stream.string.charAt(pos - 1);\n              if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n                pos--;\n                break;\n              }\n            }\n          } else if (sawSomething && !depth) {\n            ++pos;\n            break;\n          }\n        }\n        if (sawSomething && !depth)\n          state.fatArrowAt = pos;\n      }\n      __name(findFatArrow, \"findFatArrow\");\n      var atomicTypes = {\n        \"atom\": true,\n        \"number\": true,\n        \"variable\": true,\n        \"string\": true,\n        \"regexp\": true,\n        \"this\": true,\n        \"import\": true,\n        \"jsonld-keyword\": true\n      };\n      function JSLexical(indented, column, type2, align, prev, info) {\n        this.indented = indented;\n        this.column = column;\n        this.type = type2;\n        this.prev = prev;\n        this.info = info;\n        if (align != null)\n          this.align = align;\n      }\n      __name(JSLexical, \"JSLexical\");\n      function inScope(state, varname) {\n        if (!trackScope)\n          return false;\n        for (var v = state.localVars; v; v = v.next)\n          if (v.name == varname)\n            return true;\n        for (var cx2 = state.context; cx2; cx2 = cx2.prev) {\n          for (var v = cx2.vars; v; v = v.next)\n            if (v.name == varname)\n              return true;\n        }\n      }\n      __name(inScope, \"inScope\");\n      function parseJS(state, style, type2, content2, stream) {\n        var cc = state.cc;\n        cx.state = state;\n        cx.stream = stream;\n        cx.marked = null, cx.cc = cc;\n        cx.style = style;\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = true;\n        while (true) {\n          var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n          if (combinator(type2, content2)) {\n            while (cc.length && cc[cc.length - 1].lex)\n              cc.pop()();\n            if (cx.marked)\n              return cx.marked;\n            if (type2 == \"variable\" && inScope(state, content2))\n              return \"variable-2\";\n            return style;\n          }\n        }\n      }\n      __name(parseJS, \"parseJS\");\n      var cx = { state: null, column: null, marked: null, cc: null };\n      function pass() {\n        for (var i = arguments.length - 1; i >= 0; i--)\n          cx.cc.push(arguments[i]);\n      }\n      __name(pass, \"pass\");\n      function cont() {\n        pass.apply(null, arguments);\n        return true;\n      }\n      __name(cont, \"cont\");\n      function inList(name, list) {\n        for (var v = list; v; v = v.next)\n          if (v.name == name)\n            return true;\n        return false;\n      }\n      __name(inList, \"inList\");\n      function register(varname) {\n        var state = cx.state;\n        cx.marked = \"def\";\n        if (!trackScope)\n          return;\n        if (state.context) {\n          if (state.lexical.info == \"var\" && state.context && state.context.block) {\n            var newContext = registerVarScoped(varname, state.context);\n            if (newContext != null) {\n              state.context = newContext;\n              return;\n            }\n          } else if (!inList(varname, state.localVars)) {\n            state.localVars = new Var(varname, state.localVars);\n            return;\n          }\n        }\n        if (parserConfig.globalVars && !inList(varname, state.globalVars))\n          state.globalVars = new Var(varname, state.globalVars);\n      }\n      __name(register, \"register\");\n      function registerVarScoped(varname, context) {\n        if (!context) {\n          return null;\n        } else if (context.block) {\n          var inner = registerVarScoped(varname, context.prev);\n          if (!inner)\n            return null;\n          if (inner == context.prev)\n            return context;\n          return new Context(inner, context.vars, true);\n        } else if (inList(varname, context.vars)) {\n          return context;\n        } else {\n          return new Context(context.prev, new Var(varname, context.vars), false);\n        }\n      }\n      __name(registerVarScoped, \"registerVarScoped\");\n      function isModifier(name) {\n        return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n      }\n      __name(isModifier, \"isModifier\");\n      function Context(prev, vars, block2) {\n        this.prev = prev;\n        this.vars = vars;\n        this.block = block2;\n      }\n      __name(Context, \"Context\");\n      function Var(name, next) {\n        this.name = name;\n        this.next = next;\n      }\n      __name(Var, \"Var\");\n      var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n      function pushcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n        cx.state.localVars = defaultVars;\n      }\n      __name(pushcontext, \"pushcontext\");\n      function pushblockcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n        cx.state.localVars = null;\n      }\n      __name(pushblockcontext, \"pushblockcontext\");\n      pushcontext.lex = pushblockcontext.lex = true;\n      function popcontext() {\n        cx.state.localVars = cx.state.context.vars;\n        cx.state.context = cx.state.context.prev;\n      }\n      __name(popcontext, \"popcontext\");\n      popcontext.lex = true;\n      function pushlex(type2, info) {\n        var result = /* @__PURE__ */ __name(function() {\n          var state = cx.state, indent = state.indented;\n          if (state.lexical.type == \"stat\")\n            indent = state.lexical.indented;\n          else\n            for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n              indent = outer.indented;\n          state.lexical = new JSLexical(indent, cx.stream.column(), type2, null, state.lexical, info);\n        }, \"result\");\n        result.lex = true;\n        return result;\n      }\n      __name(pushlex, \"pushlex\");\n      function poplex() {\n        var state = cx.state;\n        if (state.lexical.prev) {\n          if (state.lexical.type == \")\")\n            state.indented = state.lexical.indented;\n          state.lexical = state.lexical.prev;\n        }\n      }\n      __name(poplex, \"poplex\");\n      poplex.lex = true;\n      function expect(wanted) {\n        function exp(type2) {\n          if (type2 == wanted)\n            return cont();\n          else if (wanted == \";\" || type2 == \"}\" || type2 == \")\" || type2 == \"]\")\n            return pass();\n          else\n            return cont(exp);\n        }\n        __name(exp, \"exp\");\n        return exp;\n      }\n      __name(expect, \"expect\");\n      function statement(type2, value) {\n        if (type2 == \"var\")\n          return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n        if (type2 == \"keyword a\")\n          return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n        if (type2 == \"keyword b\")\n          return cont(pushlex(\"form\"), statement, poplex);\n        if (type2 == \"keyword d\")\n          return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n        if (type2 == \"debugger\")\n          return cont(expect(\";\"));\n        if (type2 == \"{\")\n          return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n        if (type2 == \";\")\n          return cont();\n        if (type2 == \"if\") {\n          if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n            cx.state.cc.pop()();\n          return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n        }\n        if (type2 == \"function\")\n          return cont(functiondef);\n        if (type2 == \"for\")\n          return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n        if (type2 == \"class\" || isTS && value == \"interface\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\", type2 == \"class\" ? type2 : value), className, poplex);\n        }\n        if (type2 == \"variable\") {\n          if (isTS && value == \"declare\") {\n            cx.marked = \"keyword\";\n            return cont(statement);\n          } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n            cx.marked = \"keyword\";\n            if (value == \"enum\")\n              return cont(enumdef);\n            else if (value == \"type\")\n              return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n            else\n              return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n          } else if (isTS && value == \"namespace\") {\n            cx.marked = \"keyword\";\n            return cont(pushlex(\"form\"), expression, statement, poplex);\n          } else if (isTS && value == \"abstract\") {\n            cx.marked = \"keyword\";\n            return cont(statement);\n          } else {\n            return cont(pushlex(\"stat\"), maybelabel);\n          }\n        }\n        if (type2 == \"switch\")\n          return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n        if (type2 == \"case\")\n          return cont(expression, expect(\":\"));\n        if (type2 == \"default\")\n          return cont(expect(\":\"));\n        if (type2 == \"catch\")\n          return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n        if (type2 == \"export\")\n          return cont(pushlex(\"stat\"), afterExport, poplex);\n        if (type2 == \"import\")\n          return cont(pushlex(\"stat\"), afterImport, poplex);\n        if (type2 == \"async\")\n          return cont(statement);\n        if (value == \"@\")\n          return cont(expression, statement);\n        return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n      }\n      __name(statement, \"statement\");\n      function maybeCatchBinding(type2) {\n        if (type2 == \"(\")\n          return cont(funarg, expect(\")\"));\n      }\n      __name(maybeCatchBinding, \"maybeCatchBinding\");\n      function expression(type2, value) {\n        return expressionInner(type2, value, false);\n      }\n      __name(expression, \"expression\");\n      function expressionNoComma(type2, value) {\n        return expressionInner(type2, value, true);\n      }\n      __name(expressionNoComma, \"expressionNoComma\");\n      function parenExpr(type2) {\n        if (type2 != \"(\")\n          return pass();\n        return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n      }\n      __name(parenExpr, \"parenExpr\");\n      function expressionInner(type2, value, noComma) {\n        if (cx.state.fatArrowAt == cx.stream.start) {\n          var body = noComma ? arrowBodyNoComma : arrowBody;\n          if (type2 == \"(\")\n            return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n          else if (type2 == \"variable\")\n            return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n        }\n        var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n        if (atomicTypes.hasOwnProperty(type2))\n          return cont(maybeop);\n        if (type2 == \"function\")\n          return cont(functiondef, maybeop);\n        if (type2 == \"class\" || isTS && value == \"interface\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), classExpression, poplex);\n        }\n        if (type2 == \"keyword c\" || type2 == \"async\")\n          return cont(noComma ? expressionNoComma : expression);\n        if (type2 == \"(\")\n          return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n        if (type2 == \"operator\" || type2 == \"spread\")\n          return cont(noComma ? expressionNoComma : expression);\n        if (type2 == \"[\")\n          return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n        if (type2 == \"{\")\n          return contCommasep(objprop, \"}\", null, maybeop);\n        if (type2 == \"quasi\")\n          return pass(quasi, maybeop);\n        if (type2 == \"new\")\n          return cont(maybeTarget(noComma));\n        return cont();\n      }\n      __name(expressionInner, \"expressionInner\");\n      function maybeexpression(type2) {\n        if (type2.match(/[;\\}\\)\\],]/))\n          return pass();\n        return pass(expression);\n      }\n      __name(maybeexpression, \"maybeexpression\");\n      function maybeoperatorComma(type2, value) {\n        if (type2 == \",\")\n          return cont(maybeexpression);\n        return maybeoperatorNoComma(type2, value, false);\n      }\n      __name(maybeoperatorComma, \"maybeoperatorComma\");\n      function maybeoperatorNoComma(type2, value, noComma) {\n        var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n        var expr = noComma == false ? expression : expressionNoComma;\n        if (type2 == \"=>\")\n          return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n        if (type2 == \"operator\") {\n          if (/\\+\\+|--/.test(value) || isTS && value == \"!\")\n            return cont(me);\n          if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n            return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n          if (value == \"?\")\n            return cont(expression, expect(\":\"), expr);\n          return cont(expr);\n        }\n        if (type2 == \"quasi\") {\n          return pass(quasi, me);\n        }\n        if (type2 == \";\")\n          return;\n        if (type2 == \"(\")\n          return contCommasep(expressionNoComma, \")\", \"call\", me);\n        if (type2 == \".\")\n          return cont(property, me);\n        if (type2 == \"[\")\n          return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n        if (isTS && value == \"as\") {\n          cx.marked = \"keyword\";\n          return cont(typeexpr, me);\n        }\n        if (type2 == \"regexp\") {\n          cx.state.lastType = cx.marked = \"operator\";\n          cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n          return cont(expr);\n        }\n      }\n      __name(maybeoperatorNoComma, \"maybeoperatorNoComma\");\n      function quasi(type2, value) {\n        if (type2 != \"quasi\")\n          return pass();\n        if (value.slice(value.length - 2) != \"${\")\n          return cont(quasi);\n        return cont(maybeexpression, continueQuasi);\n      }\n      __name(quasi, \"quasi\");\n      function continueQuasi(type2) {\n        if (type2 == \"}\") {\n          cx.marked = \"string-2\";\n          cx.state.tokenize = tokenQuasi;\n          return cont(quasi);\n        }\n      }\n      __name(continueQuasi, \"continueQuasi\");\n      function arrowBody(type2) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type2 == \"{\" ? statement : expression);\n      }\n      __name(arrowBody, \"arrowBody\");\n      function arrowBodyNoComma(type2) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type2 == \"{\" ? statement : expressionNoComma);\n      }\n      __name(arrowBodyNoComma, \"arrowBodyNoComma\");\n      function maybeTarget(noComma) {\n        return function(type2) {\n          if (type2 == \".\")\n            return cont(noComma ? targetNoComma : target);\n          else if (type2 == \"variable\" && isTS)\n            return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);\n          else\n            return pass(noComma ? expressionNoComma : expression);\n        };\n      }\n      __name(maybeTarget, \"maybeTarget\");\n      function target(_, value) {\n        if (value == \"target\") {\n          cx.marked = \"keyword\";\n          return cont(maybeoperatorComma);\n        }\n      }\n      __name(target, \"target\");\n      function targetNoComma(_, value) {\n        if (value == \"target\") {\n          cx.marked = \"keyword\";\n          return cont(maybeoperatorNoComma);\n        }\n      }\n      __name(targetNoComma, \"targetNoComma\");\n      function maybelabel(type2) {\n        if (type2 == \":\")\n          return cont(poplex, statement);\n        return pass(maybeoperatorComma, expect(\";\"), poplex);\n      }\n      __name(maybelabel, \"maybelabel\");\n      function property(type2) {\n        if (type2 == \"variable\") {\n          cx.marked = \"property\";\n          return cont();\n        }\n      }\n      __name(property, \"property\");\n      function objprop(type2, value) {\n        if (type2 == \"async\") {\n          cx.marked = \"property\";\n          return cont(objprop);\n        } else if (type2 == \"variable\" || cx.style == \"keyword\") {\n          cx.marked = \"property\";\n          if (value == \"get\" || value == \"set\")\n            return cont(getterSetter);\n          var m;\n          if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n            cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n          return cont(afterprop);\n        } else if (type2 == \"number\" || type2 == \"string\") {\n          cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n          return cont(afterprop);\n        } else if (type2 == \"jsonld-keyword\") {\n          return cont(afterprop);\n        } else if (isTS && isModifier(value)) {\n          cx.marked = \"keyword\";\n          return cont(objprop);\n        } else if (type2 == \"[\") {\n          return cont(expression, maybetype, expect(\"]\"), afterprop);\n        } else if (type2 == \"spread\") {\n          return cont(expressionNoComma, afterprop);\n        } else if (value == \"*\") {\n          cx.marked = \"keyword\";\n          return cont(objprop);\n        } else if (type2 == \":\") {\n          return pass(afterprop);\n        }\n      }\n      __name(objprop, \"objprop\");\n      function getterSetter(type2) {\n        if (type2 != \"variable\")\n          return pass(afterprop);\n        cx.marked = \"property\";\n        return cont(functiondef);\n      }\n      __name(getterSetter, \"getterSetter\");\n      function afterprop(type2) {\n        if (type2 == \":\")\n          return cont(expressionNoComma);\n        if (type2 == \"(\")\n          return pass(functiondef);\n      }\n      __name(afterprop, \"afterprop\");\n      function commasep(what, end, sep) {\n        function proceed(type2, value) {\n          if (sep ? sep.indexOf(type2) > -1 : type2 == \",\") {\n            var lex = cx.state.lexical;\n            if (lex.info == \"call\")\n              lex.pos = (lex.pos || 0) + 1;\n            return cont(function(type3, value2) {\n              if (type3 == end || value2 == end)\n                return pass();\n              return pass(what);\n            }, proceed);\n          }\n          if (type2 == end || value == end)\n            return cont();\n          if (sep && sep.indexOf(\";\") > -1)\n            return pass(what);\n          return cont(expect(end));\n        }\n        __name(proceed, \"proceed\");\n        return function(type2, value) {\n          if (type2 == end || value == end)\n            return cont();\n          return pass(what, proceed);\n        };\n      }\n      __name(commasep, \"commasep\");\n      function contCommasep(what, end, info) {\n        for (var i = 3; i < arguments.length; i++)\n          cx.cc.push(arguments[i]);\n        return cont(pushlex(end, info), commasep(what, end), poplex);\n      }\n      __name(contCommasep, \"contCommasep\");\n      function block(type2) {\n        if (type2 == \"}\")\n          return cont();\n        return pass(statement, block);\n      }\n      __name(block, \"block\");\n      function maybetype(type2, value) {\n        if (isTS) {\n          if (type2 == \":\")\n            return cont(typeexpr);\n          if (value == \"?\")\n            return cont(maybetype);\n        }\n      }\n      __name(maybetype, \"maybetype\");\n      function maybetypeOrIn(type2, value) {\n        if (isTS && (type2 == \":\" || value == \"in\"))\n          return cont(typeexpr);\n      }\n      __name(maybetypeOrIn, \"maybetypeOrIn\");\n      function mayberettype(type2) {\n        if (isTS && type2 == \":\") {\n          if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false))\n            return cont(expression, isKW, typeexpr);\n          else\n            return cont(typeexpr);\n        }\n      }\n      __name(mayberettype, \"mayberettype\");\n      function isKW(_, value) {\n        if (value == \"is\") {\n          cx.marked = \"keyword\";\n          return cont();\n        }\n      }\n      __name(isKW, \"isKW\");\n      function typeexpr(type2, value) {\n        if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n          cx.marked = \"keyword\";\n          return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n        }\n        if (type2 == \"variable\" || value == \"void\") {\n          cx.marked = \"type\";\n          return cont(afterType);\n        }\n        if (value == \"|\" || value == \"&\")\n          return cont(typeexpr);\n        if (type2 == \"string\" || type2 == \"number\" || type2 == \"atom\")\n          return cont(afterType);\n        if (type2 == \"[\")\n          return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n        if (type2 == \"{\")\n          return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n        if (type2 == \"(\")\n          return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n        if (type2 == \"<\")\n          return cont(commasep(typeexpr, \">\"), typeexpr);\n        if (type2 == \"quasi\") {\n          return pass(quasiType, afterType);\n        }\n      }\n      __name(typeexpr, \"typeexpr\");\n      function maybeReturnType(type2) {\n        if (type2 == \"=>\")\n          return cont(typeexpr);\n      }\n      __name(maybeReturnType, \"maybeReturnType\");\n      function typeprops(type2) {\n        if (type2.match(/[\\}\\)\\]]/))\n          return cont();\n        if (type2 == \",\" || type2 == \";\")\n          return cont(typeprops);\n        return pass(typeprop, typeprops);\n      }\n      __name(typeprops, \"typeprops\");\n      function typeprop(type2, value) {\n        if (type2 == \"variable\" || cx.style == \"keyword\") {\n          cx.marked = \"property\";\n          return cont(typeprop);\n        } else if (value == \"?\" || type2 == \"number\" || type2 == \"string\") {\n          return cont(typeprop);\n        } else if (type2 == \":\") {\n          return cont(typeexpr);\n        } else if (type2 == \"[\") {\n          return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n        } else if (type2 == \"(\") {\n          return pass(functiondecl, typeprop);\n        } else if (!type2.match(/[;\\}\\)\\],]/)) {\n          return cont();\n        }\n      }\n      __name(typeprop, \"typeprop\");\n      function quasiType(type2, value) {\n        if (type2 != \"quasi\")\n          return pass();\n        if (value.slice(value.length - 2) != \"${\")\n          return cont(quasiType);\n        return cont(typeexpr, continueQuasiType);\n      }\n      __name(quasiType, \"quasiType\");\n      function continueQuasiType(type2) {\n        if (type2 == \"}\") {\n          cx.marked = \"string-2\";\n          cx.state.tokenize = tokenQuasi;\n          return cont(quasiType);\n        }\n      }\n      __name(continueQuasiType, \"continueQuasiType\");\n      function typearg(type2, value) {\n        if (type2 == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\")\n          return cont(typearg);\n        if (type2 == \":\")\n          return cont(typeexpr);\n        if (type2 == \"spread\")\n          return cont(typearg);\n        return pass(typeexpr);\n      }\n      __name(typearg, \"typearg\");\n      function afterType(type2, value) {\n        if (value == \"<\")\n          return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n        if (value == \"|\" || type2 == \".\" || value == \"&\")\n          return cont(typeexpr);\n        if (type2 == \"[\")\n          return cont(typeexpr, expect(\"]\"), afterType);\n        if (value == \"extends\" || value == \"implements\") {\n          cx.marked = \"keyword\";\n          return cont(typeexpr);\n        }\n        if (value == \"?\")\n          return cont(typeexpr, expect(\":\"), typeexpr);\n      }\n      __name(afterType, \"afterType\");\n      function maybeTypeArgs(_, value) {\n        if (value == \"<\")\n          return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      }\n      __name(maybeTypeArgs, \"maybeTypeArgs\");\n      function typeparam() {\n        return pass(typeexpr, maybeTypeDefault);\n      }\n      __name(typeparam, \"typeparam\");\n      function maybeTypeDefault(_, value) {\n        if (value == \"=\")\n          return cont(typeexpr);\n      }\n      __name(maybeTypeDefault, \"maybeTypeDefault\");\n      function vardef(_, value) {\n        if (value == \"enum\") {\n          cx.marked = \"keyword\";\n          return cont(enumdef);\n        }\n        return pass(pattern, maybetype, maybeAssign, vardefCont);\n      }\n      __name(vardef, \"vardef\");\n      function pattern(type2, value) {\n        if (isTS && isModifier(value)) {\n          cx.marked = \"keyword\";\n          return cont(pattern);\n        }\n        if (type2 == \"variable\") {\n          register(value);\n          return cont();\n        }\n        if (type2 == \"spread\")\n          return cont(pattern);\n        if (type2 == \"[\")\n          return contCommasep(eltpattern, \"]\");\n        if (type2 == \"{\")\n          return contCommasep(proppattern, \"}\");\n      }\n      __name(pattern, \"pattern\");\n      function proppattern(type2, value) {\n        if (type2 == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n          register(value);\n          return cont(maybeAssign);\n        }\n        if (type2 == \"variable\")\n          cx.marked = \"property\";\n        if (type2 == \"spread\")\n          return cont(pattern);\n        if (type2 == \"}\")\n          return pass();\n        if (type2 == \"[\")\n          return cont(expression, expect(\"]\"), expect(\":\"), proppattern);\n        return cont(expect(\":\"), pattern, maybeAssign);\n      }\n      __name(proppattern, \"proppattern\");\n      function eltpattern() {\n        return pass(pattern, maybeAssign);\n      }\n      __name(eltpattern, \"eltpattern\");\n      function maybeAssign(_type, value) {\n        if (value == \"=\")\n          return cont(expressionNoComma);\n      }\n      __name(maybeAssign, \"maybeAssign\");\n      function vardefCont(type2) {\n        if (type2 == \",\")\n          return cont(vardef);\n      }\n      __name(vardefCont, \"vardefCont\");\n      function maybeelse(type2, value) {\n        if (type2 == \"keyword b\" && value == \"else\")\n          return cont(pushlex(\"form\", \"else\"), statement, poplex);\n      }\n      __name(maybeelse, \"maybeelse\");\n      function forspec(type2, value) {\n        if (value == \"await\")\n          return cont(forspec);\n        if (type2 == \"(\")\n          return cont(pushlex(\")\"), forspec1, poplex);\n      }\n      __name(forspec, \"forspec\");\n      function forspec1(type2) {\n        if (type2 == \"var\")\n          return cont(vardef, forspec2);\n        if (type2 == \"variable\")\n          return cont(forspec2);\n        return pass(forspec2);\n      }\n      __name(forspec1, \"forspec1\");\n      function forspec2(type2, value) {\n        if (type2 == \")\")\n          return cont();\n        if (type2 == \";\")\n          return cont(forspec2);\n        if (value == \"in\" || value == \"of\") {\n          cx.marked = \"keyword\";\n          return cont(expression, forspec2);\n        }\n        return pass(expression, forspec2);\n      }\n      __name(forspec2, \"forspec2\");\n      function functiondef(type2, value) {\n        if (value == \"*\") {\n          cx.marked = \"keyword\";\n          return cont(functiondef);\n        }\n        if (type2 == \"variable\") {\n          register(value);\n          return cont(functiondef);\n        }\n        if (type2 == \"(\")\n          return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n        if (isTS && value == \"<\")\n          return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n      }\n      __name(functiondef, \"functiondef\");\n      function functiondecl(type2, value) {\n        if (value == \"*\") {\n          cx.marked = \"keyword\";\n          return cont(functiondecl);\n        }\n        if (type2 == \"variable\") {\n          register(value);\n          return cont(functiondecl);\n        }\n        if (type2 == \"(\")\n          return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n        if (isTS && value == \"<\")\n          return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n      }\n      __name(functiondecl, \"functiondecl\");\n      function typename(type2, value) {\n        if (type2 == \"keyword\" || type2 == \"variable\") {\n          cx.marked = \"type\";\n          return cont(typename);\n        } else if (value == \"<\") {\n          return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n        }\n      }\n      __name(typename, \"typename\");\n      function funarg(type2, value) {\n        if (value == \"@\")\n          cont(expression, funarg);\n        if (type2 == \"spread\")\n          return cont(funarg);\n        if (isTS && isModifier(value)) {\n          cx.marked = \"keyword\";\n          return cont(funarg);\n        }\n        if (isTS && type2 == \"this\")\n          return cont(maybetype, maybeAssign);\n        return pass(pattern, maybetype, maybeAssign);\n      }\n      __name(funarg, \"funarg\");\n      function classExpression(type2, value) {\n        if (type2 == \"variable\")\n          return className(type2, value);\n        return classNameAfter(type2, value);\n      }\n      __name(classExpression, \"classExpression\");\n      function className(type2, value) {\n        if (type2 == \"variable\") {\n          register(value);\n          return cont(classNameAfter);\n        }\n      }\n      __name(className, \"className\");\n      function classNameAfter(type2, value) {\n        if (value == \"<\")\n          return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n        if (value == \"extends\" || value == \"implements\" || isTS && type2 == \",\") {\n          if (value == \"implements\")\n            cx.marked = \"keyword\";\n          return cont(isTS ? typeexpr : expression, classNameAfter);\n        }\n        if (type2 == \"{\")\n          return cont(pushlex(\"}\"), classBody, poplex);\n      }\n      __name(classNameAfter, \"classNameAfter\");\n      function classBody(type2, value) {\n        if (type2 == \"async\" || type2 == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n          cx.marked = \"keyword\";\n          return cont(classBody);\n        }\n        if (type2 == \"variable\" || cx.style == \"keyword\") {\n          cx.marked = \"property\";\n          return cont(classfield, classBody);\n        }\n        if (type2 == \"number\" || type2 == \"string\")\n          return cont(classfield, classBody);\n        if (type2 == \"[\")\n          return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n        if (value == \"*\") {\n          cx.marked = \"keyword\";\n          return cont(classBody);\n        }\n        if (isTS && type2 == \"(\")\n          return pass(functiondecl, classBody);\n        if (type2 == \";\" || type2 == \",\")\n          return cont(classBody);\n        if (type2 == \"}\")\n          return cont();\n        if (value == \"@\")\n          return cont(expression, classBody);\n      }\n      __name(classBody, \"classBody\");\n      function classfield(type2, value) {\n        if (value == \"!\")\n          return cont(classfield);\n        if (value == \"?\")\n          return cont(classfield);\n        if (type2 == \":\")\n          return cont(typeexpr, maybeAssign);\n        if (value == \"=\")\n          return cont(expressionNoComma);\n        var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\";\n        return pass(isInterface ? functiondecl : functiondef);\n      }\n      __name(classfield, \"classfield\");\n      function afterExport(type2, value) {\n        if (value == \"*\") {\n          cx.marked = \"keyword\";\n          return cont(maybeFrom, expect(\";\"));\n        }\n        if (value == \"default\") {\n          cx.marked = \"keyword\";\n          return cont(expression, expect(\";\"));\n        }\n        if (type2 == \"{\")\n          return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n        return pass(statement);\n      }\n      __name(afterExport, \"afterExport\");\n      function exportField(type2, value) {\n        if (value == \"as\") {\n          cx.marked = \"keyword\";\n          return cont(expect(\"variable\"));\n        }\n        if (type2 == \"variable\")\n          return pass(expressionNoComma, exportField);\n      }\n      __name(exportField, \"exportField\");\n      function afterImport(type2) {\n        if (type2 == \"string\")\n          return cont();\n        if (type2 == \"(\")\n          return pass(expression);\n        if (type2 == \".\")\n          return pass(maybeoperatorComma);\n        return pass(importSpec, maybeMoreImports, maybeFrom);\n      }\n      __name(afterImport, \"afterImport\");\n      function importSpec(type2, value) {\n        if (type2 == \"{\")\n          return contCommasep(importSpec, \"}\");\n        if (type2 == \"variable\")\n          register(value);\n        if (value == \"*\")\n          cx.marked = \"keyword\";\n        return cont(maybeAs);\n      }\n      __name(importSpec, \"importSpec\");\n      function maybeMoreImports(type2) {\n        if (type2 == \",\")\n          return cont(importSpec, maybeMoreImports);\n      }\n      __name(maybeMoreImports, \"maybeMoreImports\");\n      function maybeAs(_type, value) {\n        if (value == \"as\") {\n          cx.marked = \"keyword\";\n          return cont(importSpec);\n        }\n      }\n      __name(maybeAs, \"maybeAs\");\n      function maybeFrom(_type, value) {\n        if (value == \"from\") {\n          cx.marked = \"keyword\";\n          return cont(expression);\n        }\n      }\n      __name(maybeFrom, \"maybeFrom\");\n      function arrayLiteral(type2) {\n        if (type2 == \"]\")\n          return cont();\n        return pass(commasep(expressionNoComma, \"]\"));\n      }\n      __name(arrayLiteral, \"arrayLiteral\");\n      function enumdef() {\n        return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n      }\n      __name(enumdef, \"enumdef\");\n      function enummember() {\n        return pass(pattern, maybeAssign);\n      }\n      __name(enummember, \"enummember\");\n      function isContinuedStatement(state, textAfter) {\n        return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n      }\n      __name(isContinuedStatement, \"isContinuedStatement\");\n      function expressionAllowed(stream, state, backUp) {\n        return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n      }\n      __name(expressionAllowed, \"expressionAllowed\");\n      return {\n        startState: function(basecolumn) {\n          var state = {\n            tokenize: tokenBase,\n            lastType: \"sof\",\n            cc: [],\n            lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n            localVars: parserConfig.localVars,\n            context: parserConfig.localVars && new Context(null, null, false),\n            indented: basecolumn || 0\n          };\n          if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n            state.globalVars = parserConfig.globalVars;\n          return state;\n        },\n        token: function(stream, state) {\n          if (stream.sol()) {\n            if (!state.lexical.hasOwnProperty(\"align\"))\n              state.lexical.align = false;\n            state.indented = stream.indentation();\n            findFatArrow(stream, state);\n          }\n          if (state.tokenize != tokenComment && stream.eatSpace())\n            return null;\n          var style = state.tokenize(stream, state);\n          if (type == \"comment\")\n            return style;\n          state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n          return parseJS(state, style, type, content, stream);\n        },\n        indent: function(state, textAfter) {\n          if (state.tokenize == tokenComment || state.tokenize == tokenQuasi)\n            return CodeMirror.Pass;\n          if (state.tokenize != tokenBase)\n            return 0;\n          var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;\n          if (!/^\\s*else\\b/.test(textAfter))\n            for (var i = state.cc.length - 1; i >= 0; --i) {\n              var c = state.cc[i];\n              if (c == poplex)\n                lexical = lexical.prev;\n              else if (c != maybeelse && c != popcontext)\n                break;\n            }\n          while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter)))\n            lexical = lexical.prev;\n          if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n            lexical = lexical.prev;\n          var type2 = lexical.type, closing = firstChar == type2;\n          if (type2 == \"vardef\")\n            return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n          else if (type2 == \"form\" && firstChar == \"{\")\n            return lexical.indented;\n          else if (type2 == \"form\")\n            return lexical.indented + indentUnit;\n          else if (type2 == \"stat\")\n            return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n          else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n            return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n          else if (lexical.align)\n            return lexical.column + (closing ? 0 : 1);\n          else\n            return lexical.indented + (closing ? 0 : indentUnit);\n        },\n        electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n        blockCommentStart: jsonMode ? null : \"/*\",\n        blockCommentEnd: jsonMode ? null : \"*/\",\n        blockCommentContinue: jsonMode ? null : \" * \",\n        lineComment: jsonMode ? null : \"//\",\n        fold: \"brace\",\n        closeBrackets: \"()[]{}''\\\"\\\"``\",\n        helperType: jsonMode ? \"json\" : \"javascript\",\n        jsonldMode,\n        jsonMode,\n        expressionAllowed,\n        skipExpression: function(state) {\n          parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n        }\n      };\n    });\n    CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n    CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n    CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n    CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n    CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n    CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n    CodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\n    CodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\n    CodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true });\n    CodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\n    CodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\n    CodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n  });\n})();\nvar javascript = javascript$2.exports;\nvar javascript$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": javascript\n}, [javascript$2.exports]));\nexport { javascript$1 as j };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","javascript$2","exports","mod","CodeMirror","codemirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","type2","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","readRegexp","stream","next","escaped","inSet","ret","tp","cont2","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx2","context","vars","parseJS","content2","cc","cx","marked","hasOwnProperty","length","pop","expression","statement","lex","pass","i","arguments","push","cont","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","block2","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","type3","value2","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","top","firstChar","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME","javascript","javascript$1","__proto__","Symbol","toStringTag"],"sourceRoot":""}