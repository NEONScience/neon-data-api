{"version":3,"file":"static/js/480.bc99285b.chunk.js","mappings":"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","sources":["../../../node_modules/codemirror/addon/fold/brace-fold.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction bracketFolding(pairs) {\n  return function(cm, start) {\n    var line = start.line, lineText = cm.getLine(line);\n\n    function findOpening(pair) {\n      var tokenType;\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return {ch: found + 1, tokenType: tokenType, pair: pair};\n        at = found - 1;\n      }\n    }\n\n    function findRange(found) {\n      var count = 1, lastLine = cm.lastLine(), end, startCh = found.ch, endCh\n      outer: for (var i = line; i <= lastLine; ++i) {\n        var text = cm.getLine(i), pos = i == line ? startCh : 0;\n        for (;;) {\n          var nextOpen = text.indexOf(found.pair[0], pos), nextClose = text.indexOf(found.pair[1], pos);\n          if (nextOpen < 0) nextOpen = text.length;\n          if (nextClose < 0) nextClose = text.length;\n          pos = Math.min(nextOpen, nextClose);\n          if (pos == text.length) break;\n          if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n            if (pos == nextOpen) ++count;\n            else if (!--count) { end = i; endCh = pos; break outer; }\n          }\n          ++pos;\n        }\n      }\n\n      if (end == null || line == end) return null\n      return {from: CodeMirror.Pos(line, startCh),\n              to: CodeMirror.Pos(end, endCh)};\n    }\n\n    var found = []\n    for (var i = 0; i < pairs.length; i++) {\n      var open = findOpening(pairs[i])\n      if (open) found.push(open)\n    }\n    found.sort(function(a, b) { return a.ch - b.ch })\n    for (var i = 0; i < found.length; i++) {\n      var range = findRange(found[i])\n      if (range) return range\n    }\n    return null\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"],"names":["CodeMirror","bracketFolding","pairs","cm","start","line","lineText","getLine","findOpening","pair","tokenType","at","ch","pass","found","lastIndexOf","getTokenTypeAt","Pos","test","length","findRange","end","endCh","count","lastLine","startCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","open","push","sort","a","b","range","registerHelper","hasImport","firstLine","getTokenAt","string","type","e","semi","prev","startLine","has","next","clipPos","hasInclude","slice","mod","require"],"sourceRoot":""}