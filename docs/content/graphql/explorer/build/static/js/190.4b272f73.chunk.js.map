{"version":3,"file":"static/js/190.4b272f73.chunk.js","mappings":"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","sources":["../../../node_modules/@graphiql/codemirror-graphql/esm/utils/jsonParse.js","../../../node_modules/@graphiql/codemirror-graphql/esm/variables/lint.js"],"sourcesContent":["export default function jsonParse(str) {\n    string = str;\n    strLen = str.length;\n    start = end = lastEnd = -1;\n    ch();\n    lex();\n    const ast = parseObj();\n    expect('EOF');\n    return ast;\n}\nlet string;\nlet strLen;\nlet start;\nlet end;\nlet lastEnd;\nlet code;\nlet kind;\nfunction parseObj() {\n    const nodeStart = start;\n    const members = [];\n    expect('{');\n    if (!skip('}')) {\n        do {\n            members.push(parseMember());\n        } while (skip(','));\n        expect('}');\n    }\n    return {\n        kind: 'Object',\n        start: nodeStart,\n        end: lastEnd,\n        members,\n    };\n}\nfunction parseMember() {\n    const nodeStart = start;\n    const key = kind === 'String' ? curToken() : null;\n    expect('String');\n    expect(':');\n    const value = parseVal();\n    return {\n        kind: 'Member',\n        start: nodeStart,\n        end: lastEnd,\n        key,\n        value,\n    };\n}\nfunction parseArr() {\n    const nodeStart = start;\n    const values = [];\n    expect('[');\n    if (!skip(']')) {\n        do {\n            values.push(parseVal());\n        } while (skip(','));\n        expect(']');\n    }\n    return {\n        kind: 'Array',\n        start: nodeStart,\n        end: lastEnd,\n        values,\n    };\n}\nfunction parseVal() {\n    switch (kind) {\n        case '[':\n            return parseArr();\n        case '{':\n            return parseObj();\n        case 'String':\n        case 'Number':\n        case 'Boolean':\n        case 'Null':\n            const token = curToken();\n            lex();\n            return token;\n    }\n    expect('Value');\n}\nfunction curToken() {\n    return { kind, start, end, value: JSON.parse(string.slice(start, end)) };\n}\nfunction expect(str) {\n    if (kind === str) {\n        lex();\n        return;\n    }\n    let found;\n    if (kind === 'EOF') {\n        found = '[end of file]';\n    }\n    else if (end - start > 1) {\n        found = '`' + string.slice(start, end) + '`';\n    }\n    else {\n        const match = string.slice(start).match(/^.+?\\b/);\n        found = '`' + (match ? match[0] : string[start]) + '`';\n    }\n    throw syntaxError(`Expected ${str} but found ${found}.`);\n}\nexport class JSONSyntaxError extends Error {\n    constructor(message, position) {\n        super(message);\n        this.position = position;\n    }\n}\nfunction syntaxError(message) {\n    return new JSONSyntaxError(message, { start, end });\n}\nfunction skip(k) {\n    if (kind === k) {\n        lex();\n        return true;\n    }\n}\nfunction ch() {\n    if (end < strLen) {\n        end++;\n        code = end === strLen ? 0 : string.charCodeAt(end);\n    }\n    return code;\n}\nfunction lex() {\n    lastEnd = end;\n    while (code === 9 || code === 10 || code === 13 || code === 32) {\n        ch();\n    }\n    if (code === 0) {\n        kind = 'EOF';\n        return;\n    }\n    start = end;\n    switch (code) {\n        case 34:\n            kind = 'String';\n            return readString();\n        case 45:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            kind = 'Number';\n            return readNumber();\n        case 102:\n            if (string.slice(start, start + 5) !== 'false') {\n                break;\n            }\n            end += 4;\n            ch();\n            kind = 'Boolean';\n            return;\n        case 110:\n            if (string.slice(start, start + 4) !== 'null') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Null';\n            return;\n        case 116:\n            if (string.slice(start, start + 4) !== 'true') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Boolean';\n            return;\n    }\n    kind = string[start];\n    ch();\n}\nfunction readString() {\n    ch();\n    while (code !== 34 && code > 31) {\n        if (code === 92) {\n            code = ch();\n            switch (code) {\n                case 34:\n                case 47:\n                case 92:\n                case 98:\n                case 102:\n                case 110:\n                case 114:\n                case 116:\n                    ch();\n                    break;\n                case 117:\n                    ch();\n                    readHex();\n                    readHex();\n                    readHex();\n                    readHex();\n                    break;\n                default:\n                    throw syntaxError('Bad character escape sequence.');\n            }\n        }\n        else if (end === strLen) {\n            throw syntaxError('Unterminated string.');\n        }\n        else {\n            ch();\n        }\n    }\n    if (code === 34) {\n        ch();\n        return;\n    }\n    throw syntaxError('Unterminated string.');\n}\nfunction readHex() {\n    if ((code >= 48 && code <= 57) ||\n        (code >= 65 && code <= 70) ||\n        (code >= 97 && code <= 102)) {\n        return ch();\n    }\n    throw syntaxError('Expected hexadecimal digit.');\n}\nfunction readNumber() {\n    if (code === 45) {\n        ch();\n    }\n    if (code === 48) {\n        ch();\n    }\n    else {\n        readDigits();\n    }\n    if (code === 46) {\n        ch();\n        readDigits();\n    }\n    if (code === 69 || code === 101) {\n        code = ch();\n        if (code === 43 || code === 45) {\n            ch();\n        }\n        readDigits();\n    }\n}\nfunction readDigits() {\n    if (code < 48 || code > 57) {\n        throw syntaxError('Expected decimal digit.');\n    }\n    do {\n        ch();\n    } while (code >= 48 && code <= 57);\n}\n//# sourceMappingURL=jsonParse.js.map","import CodeMirror from 'codemirror';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, } from 'graphql';\nimport jsonParse, { JSONSyntaxError, } from '../utils/jsonParse';\nCodeMirror.registerHelper('lint', 'graphql-variables', (text, options, editor) => {\n    if (!text) {\n        return [];\n    }\n    let ast;\n    try {\n        ast = jsonParse(text);\n    }\n    catch (error) {\n        if (error instanceof JSONSyntaxError) {\n            return [lintError(editor, error.position, error.message)];\n        }\n        throw error;\n    }\n    const { variableToType } = options;\n    if (!variableToType) {\n        return [];\n    }\n    return validateVariables(editor, variableToType, ast);\n});\nfunction validateVariables(editor, variableToType, variablesAST) {\n    var _a;\n    const errors = [];\n    for (const member of variablesAST.members) {\n        if (member) {\n            const variableName = (_a = member.key) === null || _a === void 0 ? void 0 : _a.value;\n            const type = variableToType[variableName];\n            if (type) {\n                for (const [node, message] of validateValue(type, member.value)) {\n                    errors.push(lintError(editor, node, message));\n                }\n            }\n            else {\n                errors.push(lintError(editor, member.key, `Variable \"$${variableName}\" does not appear in any GraphQL query.`));\n            }\n        }\n    }\n    return errors;\n}\nfunction validateValue(type, valueAST) {\n    if (!type || !valueAST) {\n        return [];\n    }\n    if (type instanceof GraphQLNonNull) {\n        if (valueAST.kind === 'Null') {\n            return [[valueAST, `Type \"${type}\" is non-nullable and cannot be null.`]];\n        }\n        return validateValue(type.ofType, valueAST);\n    }\n    if (valueAST.kind === 'Null') {\n        return [];\n    }\n    if (type instanceof GraphQLList) {\n        const itemType = type.ofType;\n        if (valueAST.kind === 'Array') {\n            const values = valueAST.values || [];\n            return mapCat(values, item => validateValue(itemType, item));\n        }\n        return validateValue(itemType, valueAST);\n    }\n    if (type instanceof GraphQLInputObjectType) {\n        if (valueAST.kind !== 'Object') {\n            return [[valueAST, `Type \"${type}\" must be an Object.`]];\n        }\n        const providedFields = Object.create(null);\n        const fieldErrors = mapCat(valueAST.members, member => {\n            var _a;\n            const fieldName = (_a = member === null || member === void 0 ? void 0 : member.key) === null || _a === void 0 ? void 0 : _a.value;\n            providedFields[fieldName] = true;\n            const inputField = type.getFields()[fieldName];\n            if (!inputField) {\n                return [\n                    [\n                        member.key,\n                        `Type \"${type}\" does not have a field \"${fieldName}\".`,\n                    ],\n                ];\n            }\n            const fieldType = inputField ? inputField.type : undefined;\n            return validateValue(fieldType, member.value);\n        });\n        for (const fieldName of Object.keys(type.getFields())) {\n            const field = type.getFields()[fieldName];\n            if (!providedFields[fieldName] &&\n                field.type instanceof GraphQLNonNull &&\n                !field.defaultValue) {\n                fieldErrors.push([\n                    valueAST,\n                    `Object of type \"${type}\" is missing required field \"${fieldName}\".`,\n                ]);\n            }\n        }\n        return fieldErrors;\n    }\n    if ((type.name === 'Boolean' && valueAST.kind !== 'Boolean') ||\n        (type.name === 'String' && valueAST.kind !== 'String') ||\n        (type.name === 'ID' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'String') ||\n        (type.name === 'Float' && valueAST.kind !== 'Number') ||\n        (type.name === 'Int' &&\n            (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    if ((type instanceof GraphQLEnumType || type instanceof GraphQLScalarType) &&\n        ((valueAST.kind !== 'String' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'Boolean' &&\n            valueAST.kind !== 'Null') ||\n            isNullish(type.parseValue(valueAST.value)))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    return [];\n}\nfunction lintError(editor, node, message) {\n    return {\n        message,\n        severity: 'error',\n        type: 'validation',\n        from: editor.posFromIndex(node.start),\n        to: editor.posFromIndex(node.end),\n    };\n}\nfunction isNullish(value) {\n    return value === null || value === undefined || value !== value;\n}\nfunction mapCat(array, mapper) {\n    return Array.prototype.concat.apply([], array.map(mapper));\n}\n//# sourceMappingURL=lint.js.map"],"names":["string","strLen","start","end","lastEnd","code","kind","parseObj","nodeStart","members","expect","skip","push","parseMember","key","curToken","value","parseVal","values","parseArr","token","lex","JSON","parse","slice","str","found","match","syntaxError","JSONSyntaxError","Error","constructor","message","position","super","this","k","ch","charCodeAt","readHex","readString","readDigits","readNumber","validateValue","type","valueAST","GraphQLNonNull","ofType","GraphQLList","itemType","mapCat","item","GraphQLInputObjectType","providedFields","Object","create","fieldErrors","member","_a","fieldName","inputField","getFields","keys","field","defaultValue","name","GraphQLEnumType","GraphQLScalarType","parseValue","lintError","editor","node","severity","from","posFromIndex","to","array","mapper","Array","prototype","concat","apply","map","CodeMirror","registerHelper","text","options","ast","length","jsonParse","error","variableToType","variablesAST","errors","variableName","validateVariables"],"sourceRoot":""}