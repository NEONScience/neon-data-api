{"version":3,"file":"static/js/100.238cfdef.chunk.js","mappings":"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","sources":["../../../node_modules/@graphiql/react/dist/comment.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar comment$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n    __name(firstNonWS, \"firstNonWS\");\n    CodeMirror.commands.toggleComment = function(cm) {\n      cm.toggleComment();\n    };\n    CodeMirror.defineExtension(\"toggleComment\", function(options) {\n      if (!options)\n        options = noOptions;\n      var cm = this;\n      var minLine = Infinity, ranges = this.listSelections(), mode = null;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        if (from.line >= minLine)\n          continue;\n        if (to.line >= minLine)\n          to = Pos(minLine, 0);\n        minLine = from.line;\n        if (mode == null) {\n          if (cm.uncomment(from, to, options))\n            mode = \"un\";\n          else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n    __name(probablyInsideString, \"probablyInsideString\");\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n    __name(getMode, \"getMode\");\n    CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine))\n        return;\n      var commentString = options.lineComment || mode.lineComment;\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n        return;\n      }\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function() {\n        if (options.indent) {\n          var baseString = null;\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i), cut = baseString.length;\n            if (!blankLines && !nonWS.test(line))\n              continue;\n            if (line.slice(0, cut) != baseString)\n              cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i)))\n              self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n          self.lineComment(from, to, options);\n        return;\n      }\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0))))\n        return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end)))\n        --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end)\n        return;\n      self.operation(function() {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i)\n              if (i != end || lastLineHasText)\n                self.replaceRange(lead + pad, Pos(i, 0));\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor)\n            self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment, lines = [];\n      var pad = options.padding == null ? \" \" : options.padding, didSomething;\n      lineComment: {\n        if (!lineString)\n          break lineComment;\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1))))\n            found = -1;\n          if (found == -1 && nonWS.test(line))\n            break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found)))\n            break lineComment;\n          lines.push(line);\n        }\n        self.operation(function() {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString), endPos = pos + lineString.length;\n            if (pos < 0)\n              continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad)\n              endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething)\n          return true;\n      }\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString)\n        return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start), open = startLine.indexOf(startString);\n      if (open == -1)\n        return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n        return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch)\n        return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch)\n        return false;\n      self.operation(function() {\n        self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad)\n          openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead)\n          for (var i2 = start + 1; i2 <= end; ++i2) {\n            var line2 = self.getLine(i2), found2 = line2.indexOf(lead);\n            if (found2 == -1 || nonWS.test(line2.slice(0, found2)))\n              continue;\n            var foundEnd = found2 + lead.length;\n            if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad)\n              foundEnd += pad.length;\n            self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n          }\n      });\n      return true;\n    });\n  });\n})();\nvar comment = comment$2.exports;\nvar comment$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": comment\n}, [comment$2.exports]));\nexport { comment$1 as c };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","comment$2","exports","CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","probablyInsideString","cm","pos","line","test","getTokenTypeAt","getMode","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","this","minLine","Infinity","ranges","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","found2","foundEnd","mod","codemirror","comment","comment$1","__proto__","Symbol","toStringTag"],"sourceRoot":""}