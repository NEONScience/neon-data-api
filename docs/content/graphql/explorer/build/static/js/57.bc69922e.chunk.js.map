{"version":3,"file":"static/js/57.bc69922e.chunk.js","mappings":"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","sources":["../../../node_modules/codemirror-graphql/src/jump.ts","../../../node_modules/codemirror-graphql/src/utils/SchemaReference.ts","../../../node_modules/codemirror-graphql/src/utils/forEachState.ts","../../../node_modules/codemirror-graphql/src/utils/getTypeInfo.ts","../../../node_modules/codemirror-graphql/src/utils/jump-addon.ts"],"sourcesContent":["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n *\n */\n\nimport CodeMirror from 'codemirror';\n\nimport getTypeInfo from './utils/getTypeInfo';\nimport {\n  getArgumentReference,\n  getDirectiveReference,\n  getEnumValueReference,\n  getFieldReference,\n  getTypeReference,\n} from './utils/SchemaReference';\nimport './utils/jump-addon';\nimport { GraphQLSchema } from 'graphql';\nimport type { State } from 'graphql-language-service';\n\nexport interface GraphQLJumpOptions {\n  schema?: GraphQLSchema;\n  onClick?: () => void;\n  state?: State;\n}\n\n/**\n * Registers GraphQL \"jump\" links for CodeMirror.\n *\n * When command-hovering over a token, this converts it to a link, which when\n * pressed will call the provided onClick handler.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\nCodeMirror.registerHelper(\n  'jump',\n  'graphql',\n  (token: CodeMirror.Token, options: GraphQLJumpOptions) => {\n    if (!options.schema || !options.onClick || !token.state) {\n      return;\n    }\n\n    // Given a Schema and a Token, produce a \"SchemaReference\" which refers to\n    // the particular artifact from the schema (such as a type, field, argument,\n    // or directive) that token references.\n    const state = token.state;\n    const kind = state.kind;\n    const step = state.step;\n    const typeInfo = getTypeInfo(options.schema, state);\n\n    if (\n      (kind === 'Field' && step === 0 && typeInfo.fieldDef) ||\n      (kind === 'AliasedField' && step === 2 && typeInfo.fieldDef)\n    ) {\n      return getFieldReference(typeInfo);\n    } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n      return getDirectiveReference(typeInfo);\n    } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n      return getArgumentReference(typeInfo);\n    } else if (kind === 'EnumValue' && typeInfo.enumValue) {\n      return getEnumValueReference(typeInfo);\n    } else if (kind === 'NamedType' && typeInfo.type) {\n      return getTypeReference(typeInfo);\n    }\n  },\n);\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport { getNamedType, GraphQLSchema } from 'graphql';\n\nimport type {\n  GraphQLArgument,\n  GraphQLDirective,\n  GraphQLEnumValue,\n  GraphQLEnumType,\n  GraphQLField,\n  GraphQLNamedType,\n} from 'graphql';\nimport { Maybe } from 'graphql/jsutils/Maybe';\nimport { TypeInfo } from './getTypeInfo';\n\nexport type SchemaReference =\n  | FieldReference\n  | DirectiveReference\n  | ArgumentReference\n  | EnumValueReference\n  | TypeReference;\n\nexport type FieldReference = {\n  kind: 'Field';\n  field: GraphQLField<any, any>;\n  type: Maybe<GraphQLNamedType>;\n  schema?: GraphQLSchema;\n};\n\nexport type DirectiveReference = {\n  kind: 'Directive';\n  directive: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type ArgumentReference = {\n  kind: 'Argument';\n  argument: GraphQLArgument;\n  field?: GraphQLField<any, any>;\n  type?: GraphQLNamedType;\n  directive?: GraphQLDirective;\n  schema?: GraphQLSchema;\n};\n\nexport type EnumValueReference = {\n  kind: 'EnumValue';\n  value?: GraphQLEnumValue;\n  type?: GraphQLEnumType;\n  schema?: GraphQLSchema;\n};\n\nexport type TypeReference = {\n  kind: 'Type';\n  type: GraphQLNamedType;\n  schema?: GraphQLSchema;\n};\n\nexport function getFieldReference(typeInfo: any): FieldReference {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n  };\n}\n\nexport function getDirectiveReference(typeInfo: any): DirectiveReference {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef,\n  };\n}\n\nexport function getArgumentReference(typeInfo: any): ArgumentReference {\n  return typeInfo.directiveDef\n    ? {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        directive: typeInfo.directiveDef,\n      }\n    : {\n        kind: 'Argument',\n        schema: typeInfo.schema,\n        argument: typeInfo.argDef,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n      };\n}\n\nexport function getEnumValueReference(typeInfo: TypeInfo): EnumValueReference {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue || undefined,\n    // $FlowFixMe\n    type: typeInfo.inputType\n      ? (getNamedType(typeInfo.inputType) as GraphQLEnumType)\n      : undefined,\n  };\n}\n\n// Note: for reusability, getTypeReference can produce a reference to any type,\n// though it defaults to the current type.\nexport function getTypeReference(\n  typeInfo: any,\n  type?: Maybe<GraphQLNamedType>,\n): TypeReference {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type,\n  };\n}\n\nfunction isMetaField(fieldDef: GraphQLField<any, any>) {\n  return fieldDef.name.slice(0, 2) === '__';\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport type { State, Maybe } from 'graphql-language-service';\n\n// Utility for iterating through a CodeMirror parse state stack bottom-up.\nexport default function forEachState(stack: State, fn: (state: State) => void) {\n  const reverseStateStack = [];\n  let state: Maybe<State> = stack;\n  while (state && state.kind) {\n    reverseStateStack.push(state);\n    state = state.prevState;\n  }\n  for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n    fn(reverseStateStack[i]);\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport {\n  isCompositeType,\n  getNullableType,\n  getNamedType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLSchema,\n  GraphQLType,\n  GraphQLObjectType,\n  GraphQLField,\n  GraphQLDirective,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLEnumValue,\n  GraphQLInputFieldMap,\n} from 'graphql';\nimport type { State, Maybe } from 'graphql-language-service';\n\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from 'graphql/type/introspection';\n\nimport forEachState from './forEachState';\n\nexport interface TypeInfo {\n  schema: GraphQLSchema;\n  type?: Maybe<GraphQLType>;\n  parentType?: Maybe<GraphQLType>;\n  inputType?: Maybe<GraphQLInputType>;\n  directiveDef?: Maybe<GraphQLDirective>;\n  fieldDef?: Maybe<GraphQLField<any, any>>;\n  argDef?: Maybe<GraphQLArgument>;\n  argDefs?: Maybe<GraphQLArgument[]>;\n  enumValue?: Maybe<GraphQLEnumValue>;\n  objectFieldDefs?: Maybe<GraphQLInputFieldMap>;\n}\n\n/**\n * Utility for collecting rich type information given any token's state\n * from the graphql-mode parser.\n */\nexport default function getTypeInfo(schema: GraphQLSchema, tokenState: State) {\n  const info: TypeInfo = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null,\n  };\n\n  forEachState(tokenState, (state: State) => {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n        break;\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef =\n          info.type && state.name\n            ? getFieldDef(schema, info.parentType, state.name)\n            : null;\n        info.type = info.fieldDef && info.fieldDef.type;\n        break;\n      case 'SelectionSet':\n        info.parentType = info.type ? getNamedType(info.type) : null;\n        break;\n      case 'Directive':\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n      case 'Arguments':\n        const parentDef = state.prevState\n          ? state.prevState.kind === 'Field'\n            ? info.fieldDef\n            : state.prevState.kind === 'Directive'\n            ? info.directiveDef\n            : state.prevState.kind === 'AliasedField'\n            ? state.prevState.name &&\n              getFieldDef(schema, info.parentType, state.prevState.name)\n            : null\n          : null;\n        info.argDefs = parentDef ? (parentDef.args as GraphQLArgument[]) : null;\n        break;\n      case 'Argument':\n        info.argDef = null;\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n        info.inputType = info.argDef && info.argDef.type;\n        break;\n      case 'EnumValue':\n        const enumType = info.inputType ? getNamedType(info.inputType) : null;\n        info.enumValue =\n          enumType instanceof GraphQLEnumType\n            ? find(\n                enumType.getValues() as GraphQLEnumValue[],\n                val => val.value === state.name,\n              )\n            : null;\n        break;\n      case 'ListValue':\n        const nullableType = info.inputType\n          ? getNullableType(info.inputType)\n          : null;\n        info.inputType =\n          nullableType instanceof GraphQLList ? nullableType.ofType : null;\n        break;\n      case 'ObjectValue':\n        const objectType = info.inputType ? getNamedType(info.inputType) : null;\n        info.objectFieldDefs =\n          objectType instanceof GraphQLInputObjectType\n            ? objectType.getFields()\n            : null;\n        break;\n      case 'ObjectField':\n        const objectField =\n          state.name && info.objectFieldDefs\n            ? info.objectFieldDefs[state.name]\n            : null;\n        info.inputType = objectField && objectField.type;\n        break;\n      case 'NamedType':\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n\n  return info;\n}\n\n// Gets the field definition given a type and field name\nfunction getFieldDef(\n  schema: GraphQLSchema,\n  type: Maybe<GraphQLType>,\n  fieldName: string,\n) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return SchemaMetaFieldDef;\n  }\n  if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return TypeMetaFieldDef;\n  }\n  if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (type && (type as GraphQLObjectType).getFields) {\n    return (type as GraphQLObjectType).getFields()[fieldName];\n  }\n}\n\n// Returns the first item in the array which causes predicate to return truthy.\nfunction find<T>(array: T[], predicate: (item: T) => boolean) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}\n","/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport { GraphQLJumpOptions } from '../jump';\n\nCodeMirror.defineOption(\n  'jump',\n  false,\n  (\n    cm: CodeMirror.Editor,\n    options: GraphQLJumpOptions,\n    old?: GraphQLJumpOptions,\n  ) => {\n    if (old && old !== CodeMirror.Init) {\n      const oldOnMouseOver = cm.state.jump.onMouseOver;\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', oldOnMouseOver);\n      const oldOnMouseOut = cm.state.jump.onMouseOut;\n      CodeMirror.off(cm.getWrapperElement(), 'mouseout', oldOnMouseOut);\n      CodeMirror.off(document, 'keydown', cm.state.jump.onKeyDown);\n      delete cm.state.jump;\n    }\n\n    if (options) {\n      const state = (cm.state.jump = {\n        options,\n        onMouseOver: onMouseOver.bind(null, cm),\n        onMouseOut: onMouseOut.bind(null, cm),\n        onKeyDown: onKeyDown.bind(null, cm),\n      });\n\n      CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n      CodeMirror.on(cm.getWrapperElement(), 'mouseout', state.onMouseOut);\n      CodeMirror.on(document, 'keydown', state.onKeyDown);\n    }\n  },\n);\n\nfunction onMouseOver(cm: CodeMirror.Editor, event: MouseEvent) {\n  const target = event.target || event.srcElement;\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  if (target?.nodeName !== 'SPAN') {\n    return;\n  }\n\n  const box = target.getBoundingClientRect();\n  const cursor = {\n    left: (box.left + box.right) / 2,\n    top: (box.top + box.bottom) / 2,\n  };\n\n  cm.state.jump.cursor = cursor;\n\n  if (cm.state.jump.isHoldingModifier) {\n    enableJumpMode(cm);\n  }\n}\n\nfunction onMouseOut(cm: CodeMirror.Editor) {\n  if (!cm.state.jump.isHoldingModifier && cm.state.jump.cursor) {\n    cm.state.jump.cursor = null;\n    return;\n  }\n\n  if (cm.state.jump.isHoldingModifier && cm.state.jump.marker) {\n    disableJumpMode(cm);\n  }\n}\n\nfunction onKeyDown(cm: CodeMirror.Editor, event: KeyboardEvent) {\n  if (cm.state.jump.isHoldingModifier || !isJumpModifier(event.key)) {\n    return;\n  }\n\n  cm.state.jump.isHoldingModifier = true;\n\n  if (cm.state.jump.cursor) {\n    enableJumpMode(cm);\n  }\n\n  const onKeyUp = (upEvent: KeyboardEvent) => {\n    if (upEvent.code !== event.code) {\n      return;\n    }\n\n    cm.state.jump.isHoldingModifier = false;\n\n    if (cm.state.jump.marker) {\n      disableJumpMode(cm);\n    }\n\n    CodeMirror.off(document, 'keyup', onKeyUp);\n    CodeMirror.off(document, 'click', onClick);\n    cm.off('mousedown', onMouseDown);\n  };\n\n  const onClick = (clickEvent: MouseEvent) => {\n    const destination = cm.state.jump.destination;\n    if (destination) {\n      cm.state.jump.options.onClick(destination, clickEvent);\n    }\n  };\n\n  const onMouseDown = (_: any, downEvent: MouseEvent) => {\n    if (cm.state.jump.destination) {\n      (downEvent as any).codemirrorIgnore = true;\n    }\n  };\n\n  CodeMirror.on(document, 'keyup', onKeyUp);\n  CodeMirror.on(document, 'click', onClick);\n  cm.on('mousedown', onMouseDown);\n}\n\nconst isMac =\n  typeof navigator !== 'undefined' &&\n  navigator &&\n  navigator.appVersion.indexOf('Mac') !== -1;\n\nfunction isJumpModifier(key: string) {\n  return key === (isMac ? 'Meta' : 'Control');\n}\n\nfunction enableJumpMode(cm: CodeMirror.Editor) {\n  if (cm.state.jump.marker) {\n    return;\n  }\n\n  const cursor = cm.state.jump.cursor;\n  const pos = cm.coordsChar(cursor);\n  const token = cm.getTokenAt(pos, true);\n\n  const options = cm.state.jump.options;\n  const getDestination = options.getDestination || cm.getHelper(pos, 'jump');\n  if (getDestination) {\n    const destination = getDestination(token, options, cm);\n    if (destination) {\n      const marker = cm.markText(\n        { line: pos.line, ch: token.start },\n        { line: pos.line, ch: token.end },\n        { className: 'CodeMirror-jump-token' },\n      );\n\n      cm.state.jump.marker = marker;\n      cm.state.jump.destination = destination;\n    }\n  }\n}\n\nfunction disableJumpMode(cm: CodeMirror.Editor) {\n  const marker = cm.state.jump.marker;\n  cm.state.jump.marker = null;\n  cm.state.jump.destination = null;\n\n  marker.clear();\n}\n"],"names":["require","codemirror_1","registerHelper","token","options","schema","onClick","state","kind","step","typeInfo","getTypeInfo_1","fieldDef","SchemaReference_1","directiveDef","argDef","enumValue","type","isMetaField","name","slice","exports","field","parentType","directive","argument","value","undefined","inputType","graphql_1","stack","fn","reverseStateStack","push","prevState","i","length","getFieldDef","fieldName","introspection_1","getQueryType","getFields","tokenState","info","argDefs","objectFieldDefs","forEachState_1","getMutationType","getSubscriptionType","getType","getDirective","parentDef","args","enumType","array","predicate","find","getValues","val","nullableType","ofType","objectType","objectField","onMouseOver","cm","event","target","srcElement","HTMLElement","nodeName","box","getBoundingClientRect","cursor","left","right","top","bottom","jump","isHoldingModifier","enableJumpMode","onMouseOut","marker","disableJumpMode","onKeyDown","key","isMac","clickEvent","destination","onMouseDown","_","downEvent","codemirrorIgnore","on","document","onKeyUp","upEvent","code","off","defineOption","old","Init","oldOnMouseOver","getWrapperElement","oldOnMouseOut","bind","navigator","appVersion","indexOf","pos","coordsChar","getTokenAt","getDestination","getHelper","markText","line","ch","start","end","className","clear"],"sourceRoot":""}