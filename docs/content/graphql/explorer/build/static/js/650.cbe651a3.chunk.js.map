{"version":3,"file":"static/js/650.cbe651a3.chunk.js","mappings":"gQASA,iBAEA,UAEMA,EAAW,CAAC,QAAS,UAAW,cAAe,QAC/CC,EAA+B,CACnC,sBAAuB,aACvB,uBAAwB,cACxB,kBAAmB,UAuBrBC,EAAAA,QAAWC,eACT,OACA,WACA,SAACC,EAAcC,GACb,IAAMC,EAASD,EAAQC,OAiBvB,OAhBmBC,EAAAA,eACjBH,EACAE,EACAD,EAAQG,qBACRC,EACAJ,EAAQK,mBAGiBC,KAAI,SAAAC,GAAS,MAAC,CACvCC,QAASD,EAAMC,QACfC,SAAUF,EAAME,SAAWd,EAASY,EAAME,SAAW,GAAKd,EAAS,GACnEe,KAAMH,EAAMI,OAASf,EAAKW,EAAMI,aAAUP,EAC1CQ,KAAMf,EAAAA,QAAWgB,IAAIN,EAAMO,MAAMC,MAAMC,KAAMT,EAAMO,MAAMC,MAAME,WAC/DC,GAAIrB,EAAAA,QAAWgB,IAAIN,EAAMO,MAAMK,IAAIH,KAAMT,EAAMO,MAAMK,IAAIF","sources":["../../../node_modules/codemirror-graphql/src/lint.ts"],"sourcesContent":["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport { FragmentDefinitionNode, GraphQLSchema, ValidationRule } from 'graphql';\nimport { getDiagnostics } from 'graphql-language-service';\n\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE: Record<string, string> = {\n  'GraphQL: Validation': 'validation',\n  'GraphQL: Deprecation': 'deprecation',\n  'GraphQL: Syntax': 'syntax',\n};\n\ninterface GraphQLLintOptions {\n  schema?: GraphQLSchema;\n  validationRules: ValidationRule[];\n  externalFragments?: string | FragmentDefinitionNode[];\n}\n\n/**\n * Registers a \"lint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"lint\" addon: https://codemirror.net/demo/lint.html\n * Given the text within an editor, this helper will take that text and return\n * a list of linter issues, derived from GraphQL's parse and validate steps.\n * Also, this uses `graphql-language-service-parser` to power the diagnostics\n * service.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides the linter with positionally relevant info\n *\n */\nCodeMirror.registerHelper(\n  'lint',\n  'graphql',\n  (text: string, options: GraphQLLintOptions): CodeMirror.Annotation[] => {\n    const schema = options.schema;\n    const rawResults = getDiagnostics(\n      text,\n      schema,\n      options.validationRules,\n      undefined,\n      options.externalFragments,\n    );\n\n    const results = rawResults.map(error => ({\n      message: error.message,\n      severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n      type: error.source ? TYPE[error.source] : undefined,\n      from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n      to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n\n    return results;\n  },\n);\n"],"names":["SEVERITY","TYPE","codemirror_1","registerHelper","text","options","schema","graphql_language_service_1","validationRules","undefined","externalFragments","map","error","message","severity","type","source","from","Pos","range","start","line","character","to","end"],"sourceRoot":""}