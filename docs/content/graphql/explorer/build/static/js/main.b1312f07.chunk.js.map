{"version":3,"sources":["env.ts","GraphiQL.jsx","index.tsx"],"names":["Env","getApiProtocol","protocol","window","location","protocolOverride","process","REACT_APP_NEON_API_HOST_PROTOCOL","length","String","getApiHostName","hostName","host","hostOverride","REACT_APP_NEON_API_HOST","getApiHost","graphQLFetcher","graphQLParams","init","method","headers","body","JSON","stringify","fetch","then","response","json","getGraphiQL","defaultVariableEditorOpen","fetcher","defaultQuery","variables","ReactDOM","render","document","getElementById"],"mappings":"kNAMMA,EAAkB,CACtBC,eAAgB,WACd,IAAIC,EAAQ,UAAMC,OAAOC,SAASF,UAC5BG,EAAuCC,oIAAYC,iCAIzD,MAHgC,kBAArBF,GAAkCA,EAAiBG,OAAS,IACrEN,EAAWO,OAAOJ,IAEbH,GAETQ,eAAgB,WACd,IAAIC,EAAQ,UAAMR,OAAOC,SAASQ,MAC5BC,EAAmCP,oIAAYQ,wBAIrD,MAH4B,kBAAjBD,GAA8BA,EAAaL,OAAS,IAC7DG,EAAWF,OAAOI,IAEbF,GAETI,WAAY,2BACPf,EAAIC,iBADG,aACkBD,EAAIU,oBAIrBV,I,SCkBTgB,EAAiB,SAACC,GACtB,IAAMC,EAAO,CACXC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUN,IAEvB,OAAOO,IAAM,GAAD,OAAIxB,EAAIe,aAAR,YAAgCG,GACzCO,MAAK,SAACC,GAAD,OAAcA,EAASC,WAYlBC,EATK,kBAClB,cAAC,IAAD,CACEC,2BAAyB,EACzBC,QAASd,EACTe,aAhDc,0rBAiDdC,UArBkB,gD,cC/BtBC,IAASC,OACPN,IACAO,SAASC,eAAe,W","file":"static/js/main.b1312f07.chunk.js","sourcesContent":["export interface ApiHostEnv {\n  getApiProtocol: () => string;\n  getApiHostName: () => string;\n  getApiHost: () => string;\n}\n\nconst Env: ApiHostEnv = {\n  getApiProtocol: (): string => {\n    let protocol = `${window.location.protocol}`;\n    const protocolOverride: string | undefined = process.env.REACT_APP_NEON_API_HOST_PROTOCOL;\n    if (typeof protocolOverride === 'string' && (protocolOverride.length > 0)) {\n      protocol = String(protocolOverride);\n    }\n    return protocol;\n  },\n  getApiHostName: (): string => {\n    let hostName = `${window.location.host}`;\n    const hostOverride: string | undefined = process.env.REACT_APP_NEON_API_HOST;\n    if (typeof hostOverride === 'string' && (hostOverride.length > 0)) {\n      hostName = String(hostOverride);\n    }\n    return hostName;\n  },\n  getApiHost: (): string => (\n    `${Env.getApiProtocol()}//${Env.getApiHostName()}`\n  ),\n};\n\nexport default Env;\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport React from 'react';\nimport GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\n\nimport Env from './env';\n\nconst defaultQuery = `\n# Type queries into this side of the screen,\n# and you will see intelligent typeaheads aware\n# of the current GraphQL type schema,\n# live syntax, and validation errors highlighted\n# within the text.\n\n# Here's a query for retrieving a single data product\n# as specified by the query variables window below.\nquery Product($productCode: String!) {\n  product (productCode: $productCode) {\n    productCode\n    productName\n    productDescription\n    productScienceTeam\n    productHasExpanded\n    productBasicDescription\n    productExpandedDescription\n    productPublicationFormatType\n    keywords\n    themes\n    siteCodes {\n      siteCode\n      availableMonths\n    }\n  }\n}\n`;\nconst defaultVariables = `\n{\n  \"productCode\": \"DP1.00001.001\"\n}\n`;\n\nconst graphQLFetcher = (graphQLParams) => {\n  const init = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(graphQLParams),\n  };\n  return fetch(`${Env.getApiHost()}/graphql`, init)\n    .then((response) => response.json());\n};\n\nconst getGraphiQL = () => (\n  <GraphiQL\n    defaultVariableEditorOpen\n    fetcher={graphQLFetcher}\n    defaultQuery={defaultQuery}\n    variables={defaultVariables}\n  />\n);\n\nexport default getGraphiQL;\n","/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport getGraphiQL from './GraphiQL';\n\nimport './App.css';\nimport 'graphiql/graphiql.css';\n\nReactDOM.render(\n  getGraphiQL(),\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}